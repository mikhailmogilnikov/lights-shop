services:
  postgres:
    image: postgres:latest
    container_name: lights-shop-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - lights-shop-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 2s
      retries: 20

  product-service:
    build:
      context: ./apps/backend/product-service
      dockerfile: Dockerfile
    container_name: lights-shop-product-service
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PRODUCT_SERVICE_PORT}
      NODE_ENV: development
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      SEED_DATABASE: ${SEED_DATABASE:-true}
    ports:
      - '${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lights-shop-network
    restart: unless-stopped

  order-service:
    build:
      context: ./apps/backend/order-service
      dockerfile: Dockerfile
    container_name: lights-shop-order-service
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${ORDER_SERVICE_PORT}
      NODE_ENV: development
      PRODUCT_SERVICE_URL: ${PRODUCT_SERVICE_URL}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
    ports:
      - '${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - lights-shop-network
    restart: unless-stopped
    
  api-gateway:
    image: nginx:alpine
    container_name: lights-shop-api-gateway
    ports:
      - '8080:80'
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template
      - ./nginx/entrypoint.sh:/entrypoint.sh
    environment:
      - PRODUCT_SERVICE_PORT=${PRODUCT_SERVICE_PORT}
      - ORDER_SERVICE_PORT=${ORDER_SERVICE_PORT}
    entrypoint: /entrypoint.sh
    depends_on:
      - product-service
      - order-service
    networks:
      - lights-shop-network
    restart: unless-stopped

volumes:
  postgres-data:

networks:
  lights-shop-network:
    driver: bridge
